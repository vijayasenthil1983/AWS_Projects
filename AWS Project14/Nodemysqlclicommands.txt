Sample App is from this video: https://www.youtube.com/watch?v=BAGTrupuE70&t=10s. The Github repo: https://github.com/haresrv/sqldeploy

sudo yum update -y
sudo amazon-linux-extras list | grep nginx
sudo amazon-linux-extras enable nginx1
sudo yum clean metadata
sudo yum -y install nginx
nginx -v
sudo su
cd /
ls
mkdir testapp
cd testapp
aws s3 cp s3://nodemysqlmkmk --region us-east-1 . --recursive
ls

sudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
. ~/.nvm/nvm.sh
nvm install node
node -e "console.log('Running Node.js ' + process.version)"
ls
cd NodeJS
ls
npm install express body-parser cors mysql
While still in NodeJS folder...
Now make sure to allow the security group of your ec2 instance allow connection from a custom tcp port 3000-4000 from anywhere i.e. 0.0.0.0 
Now, do 
node server.js (leave this running)

In a new session manager tab, go back to the testapp folder and do the following
cd /
ls
sudo su
ls
cd testapp/
ls
rm -rf package-lock.json
ls
npm install
ls
npm start 
To see the app, open your browser and enter the IP of your instance and append i.e. 3000, e.g. http://3.238.157.100:3000


Now, let's add some tables to the database... Open MySQL Workbench and do the following:
show databases;
use cloud337;
show tables;
create table student ( name varchar(20), rollno varchar(20));
show tables;
select * from student;


You will notice that if we Ctrl+C on our server, our app will no longer be running. So we need a tool called pm2 to manage the server and keep it up even if we exit from the server
Make sure you're in the testapp folder, then do the following
npm install -g pm2 (to install pm2)
cd NodeJS
ls
pm2 start server.js (to start pm2)
cd .. (go back to testapp folder)
cd src
pm2 start --name App.js npm -- start
pm2 list (to list your runnig apps)
pm2 stop 0 (to stop app with IP 0)
pm2 delete all (to delete/completely remove the apps from the list)


If creating a load balancer for this, for healthcheck use "/"
Now, let's use nginx to forward requests to port 80 i.e. we don't have to add "3000" to the browser anymore, we can just type the IP of the server and it should work 
sudo nano /etc/nginx/nginx.conf
Now, add this to the file, in the server section
********************************************
server {
   listen         80 default_server;
   listen         [::]:80 default_server;
   server_name    localhost;
   root           /usr/share/nginx/html;
   location / {
       proxy_pass http://34.229.11.42:3000;
   }
}
********************************************

Now do:
sudo service nginx restart (Restart nginx)
sudo chkconfig nginx on (atomatically restart nginx if server restart or something goes wrong)
systemctl status nginx.service (to check the status of nginx and see if running)

To test, grab the DNS name of your Load Balancer and put it in your browser to see if the app will load. Great job if it worked :)

Now, let's use the commands below to generate an active startup script for PM2 so that if our server restarts for any reason, PM2 will automatically start our apps again (Read about this here https://pm2.keymetrics.io/docs/usage/quick-start/#setup-startup-script):
pm2 startup
pm2 save




Useful Links:
This link helped with https://regbrain.com/article/node-nginx-ec2
This really helped with troubleshooting: https://stackoverflow.com/a/48064931 some issues

How to start Reactjs application with PM2 as a service (Linux & MacOS)
https://medium.com/@devesu/how-to-start-reactjs-application-with-pm2-as-a-service-linux-macos-854d5df3fcf1

My Google Drive: https://drive.google.com/drive/folders/1Odgbg6mR7zdJW9AFn_-xHNzQ9eWaFOyC?usp=sharing